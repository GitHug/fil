AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for provisioning Fil - Microbial File Storage.

Globals:
  Function:
    Timeout: 5
    Runtime: nodejs12.x

Parameters:
  Stage:
    Type: String
    Default: test
    Description: The stage to use

  ApiKeyValue:
    Type: String
    MinLength: 20
    Description: API key used for communication between API Gateway and Cloudfront Distribution

  DBMasterUserName:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: admin_user

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Description: API Gateway for Fil - Microbial File Storage
      StageName: !Ref Stage
      BinaryMediaTypes:
        - application/form-data
      Auth:
        ApiKeyRequired: true
        DefaultAuthorizer: GeneralAuth
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
            UserPoolArn: !GetAtt UserPool.Arn

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGatewayStage
    Properties:
      Description: CloudFront usage only (Fil)
      UsagePlanName: !Sub ${AWS::StackName}_CloudFront_only
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref Stage
      Tags:
        - Key: application
          Value: fil

  ApiKey: 
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Description: CloudFormation API Key
      Value: !Ref ApiKeyValue
      Enabled: true

  ApiKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  UploadFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Handles form data file uploads to S3
      Handler: dist/handlers/upload.handler
      Layers:
        - !Ref RuntimeDependenciesLayer
      Environment:
        Variables:
          BUCKET: !Ref FilStorageBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref FilStorageBucket
        - Statement:
          - Effect: Allow
            Action: ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/fil/cloudfront-domain
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/uploads
            Auth:
              Authorizer: GeneralAuth
            Method: post
            RestApiId:
              Ref: ApiGateway

  UserConfirmFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Database
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Handler for putting user details on SQS post confirmation sign-up
      Handler: dist/handlers/userConfirm.handler
      Timeout: 10
      Environment:
        Variables:
          QUEUE: !Ref FilQueue
      Layers:
        - !Ref RuntimeDependenciesLayer
      Events:
        CognitoEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation
      Policies: 
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action: 
              - 'sqs:SendMessage'
            Resource: 
              - '*'

  FilQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: FilQueue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FilDeadLetterQueue.Arn
        maxReceiveCount: 5

  FilDeadLetterQueue:
    Type: AWS::SQS::Queue

  CreateUserFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Database
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: SQS worker for inserting user details in DB
      Handler: dist/handlers/createUser.handler
      Timeout: 60
      Environment:
        Variables:
          SECRET_ARN: '{{resolve:ssm:/applications/fil/secret:1}}'
          RDS_CLUSTER: '{{resolve:ssm:/applications/fil/cluster:1}}'
          DATABASE_NAME: '{{resolve:ssm:/applications/fil/database:1}}'
      Layers:
        - !Ref RuntimeDependenciesLayer
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FilQueue.Arn
            BatchSize: 1
      VpcConfig:
        SecurityGroupIds:
          - '{{resolve:ssm:/applications/fil/security-group:1}}'
        SubnetIds:
          - '{{resolve:ssm:/applications/fil/subnet1:1}}'
          - '{{resolve:ssm:/applications/fil/subnet2:1}}'
          - '{{resolve:ssm:/applications/fil/subnet3:1}}'
      Policies: 
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AdministratorAccess

  UploadTriggerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - Database
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Insert upload details into DB
      Handler: dist/handlers/uploadTrigger.handler
      Timeout: 60
      DeadLetterQueue: 
        TargetArn: !GetAtt FilDeadLetterQueue.Arn
        Type: SQS
      Environment:
        Variables:
          SECRET_ARN: '{{resolve:ssm:/applications/fil/secret:1}}'
          RDS_CLUSTER: '{{resolve:ssm:/applications/fil/cluster:1}}'
          DATABASE_NAME: '{{resolve:ssm:/applications/fil/database:1}}'
      Layers:
        - !Ref RuntimeDependenciesLayer
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref FilStorageBucket
            Events: s3:ObjectCreated:Put
      VpcConfig:
        SecurityGroupIds:
          - '{{resolve:ssm:/applications/fil/security-group:1}}'
        SubnetIds:
          - '{{resolve:ssm:/applications/fil/subnet1:1}}'
          - '{{resolve:ssm:/applications/fil/subnet2:1}}'
          - '{{resolve:ssm:/applications/fil/subnet3:1}}'
      Policies: 
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AdministratorAccess
        - Statement:
          - Effect: Allow
            Action: 
              - 's3:GetObject'
            Resource: 
              - '*'

  Database:
    Type: AWS::Serverless::Application
    Properties:
      Location: 'database.template.yml'
      Parameters:
        DBMasterUserName: !Ref DBMasterUserName
        VpcCIDR: 10.30.0.0/16
        NumberOfSubnets: 3
        SubnetOffset: 8
        DatabaseName: fil_db

  FilStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::AccountId}-fil-storage-bucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
          Status: Enabled
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"
      AccessControl: PublicRead

  UserPool:
    Type: AWS::Cognito::UserPool 
    Properties: 
      UserPoolName: !Sub ${AWS::StackName}UserPool${Stage} 
      Policies: 
        PasswordPolicy: 
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes: 
        - email
      Schema: 
        - AttributeDataType: String 
          Name: email 
          Required: false

  SSMUserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /applications/fil/user-pool
      Type: String
      Value: !Ref UserPool
      Description: Cognito User Pool ID

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub fil-${Stage}-${AWS::AccountId}
      UserPoolId: !Ref UserPool
  
  CloudFrontS3LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_100
        Comment: !Sub ${AWS::StackName}-cf
        HttpVersion: http2
        IPV6Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 400
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
          - ErrorCachingMinTTL: 0
            ErrorCode: 405
          - ErrorCachingMinTTL: 0
            ErrorCode: 414
          - ErrorCachingMinTTL: 0
            ErrorCode: 416
          - ErrorCachingMinTTL: 0
            ErrorCode: 500
          - ErrorCachingMinTTL: 0
            ErrorCode: 501
          - ErrorCachingMinTTL: 0
            ErrorCode: 502
          - ErrorCachingMinTTL: 0
            ErrorCode: 503
          - ErrorCachingMinTTL: 0
            ErrorCode: 504
        Logging:
          Bucket: !GetAtt CloudFrontS3LoggingBucket.DomainName
          Prefix: CloudFrontDistributionLogs
        Origins:
          - Id: APIGW
            DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !Ref ApiKeyValue
          - Id: S3 Origin
            DomainName: !GetAtt FilStorageBucket.DomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3 Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
        CacheBehaviors:
          - PathPattern: !Sub '${Stage}/api*'
            TargetOriginId: APIGW
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: false
              Headers:
                - Authorization
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref AuthAtEdge.Version
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool 
      ClientName: !Sub ${AWS::StackName}UserPoolClient-${Stage}-${AWS::AccountId} 
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: 
        -  !Sub "https://${Distribution.DomainName}"
      LogoutURLs: 
        -  !Sub "https://${Distribution.DomainName}"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit #for testing with postman
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  AuthAtEdge:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: CloudFront edge auth handler
      Handler: dist/edge/auth.handler
      Role: !GetAtt AuthAtEdgeRole.Arn
      AutoPublishAlias: live

  AuthAtEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: "*"
                Action: lambda:InvokeFunction
        - PolicyName: ReadFromSSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/fil/user-pool

  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Runtime dependencies for Lambda functions
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  SSMCloudFrontDomainName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /applications/fil/cloudfront-domain
      Type: String
      Value: !Sub "https://${Distribution.DomainName}"
      Description: Cloudfront domain name

Outputs:
  StackName:
    Description: Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: StackName

  CFDistribution: 
    Description: Cloudfront Domain URL
    Value: !Sub "https://${Distribution.DomainName}"

  AuthURL:
    Description: "Auth endpoint URL"
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login"

  ClientID:
    Description: "User pool client ID"
    Value: !Ref UserPoolClient

  UserConfirmQueueURL: 
    Description: "URL of queue for processing confirmed users post sign-up"
    Value: !Ref FilQueue

  SourceQueueARN: 
    Description: "ARN of user confirm queue"
    Value: !GetAtt FilQueue.Arn

  DeadLetterQueueURL: 
    Description: "URL of dead-letter queue"
    Value: 
      Ref: "FilDeadLetterQueue"

  DeadLetterQueueARN: 
    Description: "ARN of dead-letter queue"
    Value: !GetAtt FilDeadLetterQueue.Arn

